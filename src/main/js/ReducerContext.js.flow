// Copyright (c) 2019 Gonzalo MÃ¼ller Bravo.

import type {
  Context,
  Element,
} from 'react'

export type Dispatcher<ACTION> = (value: ACTION) => void
export type Reducer<STATE, ACTION> = (prevState: STATE, action: ACTION) => STATE
export type ReducerContextValue<STATE, ACTION> = [STATE, Dispatcher<ACTION>]
export type ReducerContextDefaultValue<STATE, ACTION> = ReducerContextValue<STATE, ACTION> | null

export interface ReducerContextProps<STATE, ACTION> {
  context: Context<ReducerContextDefaultValue<STATE, ACTION>>;
  reducer: Reducer<STATE, ACTION>;
  initialState: STATE;
  children: Element<any>;
}

export interface ReducerContextInterface<STATE, ACTION> {
  state: STATE;
  dispatch: Dispatcher<ACTION>;
}

declare export default function ReducerContext<STATE, ACTION>(props: ReducerContextProps<STATE, ACTION>): Element<typeof ReducerContext>

declare export function useReducerContext<STATE, ACTION>(
  context: Context<ReducerContextDefaultValue<STATE, ACTION>>
): ReducerContextInterface<STATE, ACTION>

declare export function useReducerState<STATE, ACTION>(
  context: Context<ReducerContextDefaultValue<STATE, ACTION>>
): STATE

declare export function useReducerDispatcher<STATE, ACTION>(
  context: Context<ReducerContextDefaultValue<STATE, ACTION>>
): Dispatcher<ACTION>
