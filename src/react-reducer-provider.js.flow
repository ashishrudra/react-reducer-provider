// Copyright (c) 2020 Gonzalo MÃ¼ller Bravo.

import type {
  Element
} from 'react'

// Provider Component
/////////////////////
interface ProviderProps<STATE> {
  name?: string | number;
  initialState: STATE;
  children: Element<any>;
}

// Reducer Component Definition
///////////////////////////////

interface ReducerProps<STATE, REDUCER> extends ProviderProps<STATE> {
  reducer: REDUCER;
}

export interface SyncReducer<STATE, ACTION> {
  (prevState: STATE, action: ACTION): STATE;
}

export interface SyncReducerProps<STATE, ACTION> extends ReducerProps<STATE, SyncReducer<STATE, ACTION>> {}

declare export function SyncReducerProvider<STATE, ACTION>(
  props: $ReadOnly<SyncReducerProps<STATE, ACTION>>
): Element<typeof SyncReducerProvider>

export interface AsyncReducer<STATE, ACTION> {
  (prevState: STATE, action: ACTION): Promise<STATE>;
}

export interface AsyncReducerProps<STATE, ACTION> extends ReducerProps<STATE, AsyncReducer<STATE, ACTION>> {}

declare export function AsyncReducerProvider<STATE, ACTION>(
  props: $ReadOnly<AsyncReducerProps<STATE, ACTION>>
): Element<typeof AsyncReducerProvider>

// Mapper Component Definition
//////////////////////////////

interface MapperProps<STATE, MAPPER> extends ProviderProps<STATE> {
  mapper: MAPPER;
}

export interface SyncMapper<STATE, ACTION> {
  (action: ACTION): STATE;
}

export interface SyncMapperProps<STATE, ACTION> extends MapperProps<STATE, SyncMapper<STATE, ACTION>> {}

declare export function SyncMapperProvider<STATE, ACTION>(
  props: $ReadOnly<SyncMapperProps<STATE, ACTION>>
): Element<typeof SyncMapperProvider>

export interface AsyncMapper<STATE, ACTION> {
  (action: ACTION): Promise<STATE>;
}

export interface AsyncMapperProps<STATE, ACTION> extends MapperProps<STATE, AsyncMapper<STATE, ACTION>> {}

declare export function AsyncMapperProvider<STATE, ACTION>(
  props: $ReadOnly<AsyncMapperProps<STATE, ACTION>>
): Element<typeof AsyncMapperProvider>

// Providers Consumption
////////////////////////

export type Sync<T = any> = T
export type Async<T = any> = Promise<T>

export interface Dispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>> {
  (value: ACTION): DISPATCH
}

export type ProviderValue<
  STATE,
  ACTION,
  DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>
> = [STATE, Dispatcher<ACTION, DISPATCH>]

/**
 * @deprecated since version 3.4.0, use 'ProviderValue' instead.
 */
export type ReducerProviderValue<STATE, ACTION, DISPATCH = Sync<void>> = ProviderValue<STATE, ACTION, DISPATCH>

declare export function useReducer<STATE, ACTION, DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>>(
  name?: string | number
): ProviderValue<STATE, ACTION, DISPATCH>

declare export function useReducerState<STATE>(name?: string | number): STATE

declare export function useReducerDispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>>(
  name?: string | number
): Dispatcher<ACTION, DISPATCH>

declare export function useMapper<STATE, ACTION, DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>>(
  name?: string | number
): ProviderValue<STATE, ACTION, DISPATCH>

declare export function useMapperState<STATE>(name?: string | number): STATE

declare export function useMapperDispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>>(
  name?: string | number
): Dispatcher<ACTION, DISPATCH>

// Helpers
//////////

export interface Action<TYPE, DATA = typeof undefined> {
  type: TYPE;
  data?: DATA;
}
