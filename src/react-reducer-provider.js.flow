// Copyright (c) 2020 Gonzalo MÃ¼ller Bravo.

import type {
  Element
} from 'react'

// Reducer Component Definition
///////////////////////////////

export interface ReducerProps<STATE, REDUCER> {
  name?: string;
  reducer: REDUCER;
  initialState: STATE;
  children: Element<any>;
}

export interface SyncReducer<STATE, ACTION> {
  (prevState: STATE, action: ACTION): STATE;
}

export interface SyncReducerProps<STATE, ACTION> extends ReducerProps<STATE, SyncReducer<STATE, ACTION>> {}

declare export function SyncReducerProvider<STATE, ACTION>(props: SyncReducerProps<STATE, ACTION>): Element<typeof SyncReducerProvider>

export interface AsyncReducer<STATE, ACTION> {
  (prevState: STATE, action: ACTION): Promise<STATE>;
}

export interface AsyncReducerProps<STATE, ACTION> extends ReducerProps<STATE, AsyncReducer<STATE, ACTION>> {}

declare export function AsyncReducerProvider<STATE, ACTION>(props: AsyncReducerProps<STATE, ACTION>): Element<typeof AsyncReducerProvider>

// Reducer Consumption
//////////////////////

export type Sync = void
export type Async = Promise<void>

export interface Dispatcher<ACTION, DISPATCH: Async | Sync = Sync> {
  (value: ACTION): DISPATCH
}

export type ReducerProviderValue<STATE, ACTION, DISPATCH: Async | Sync = Sync> = [STATE, Dispatcher<ACTION, DISPATCH>]

declare export function useReducer<STATE, ACTION, DISPATCH: Async | Sync = Sync>(name?: string): ReducerProviderValue<STATE, ACTION, DISPATCH>

declare export function useReducerState<STATE>(name?: string): STATE

declare export function useReducerDispatcher<ACTION, DISPATCH: Async | Sync = Sync>(name?: string): Dispatcher<ACTION, DISPATCH>

// Helpers
//////////

export interface Action<TYPE, DATA = typeof undefined> {
  type: TYPE;
  data?: DATA;
}
